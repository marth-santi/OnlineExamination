{"version":3,"sources":["components/QuestionCmp/Question.tsx","CONST.tsx","customModules/APIRequest.tsx","components/ExamCmp/Exam.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","margin","formControl","padding","questionLabel","fontWeight","question","backgroundColor","green","color","lightBlue","paddingLeft","textAlign","option","minWidth","Question","props","classes","initValueSelected","isCheckedOp1","isCheckedOp2","isCheckedOp3","isCheckedOp4","React","useState","selectedSingleValue","setSelectedSingleValue","selectedMultipleValue","setSelectedMultipleValue","useEffect","onResponseChange","handleSingleChoice","event","target","name","checked","handleMultipleChoice","response","isMultiple","updateResponse","Accordion","className","AccordionSummary","Typography","variant","component","id","AccordionDetails","FormControl","FormGroup","FormControlLabel","control","Checkbox","onChange","label","op1","op2","op3","op4","RadioGroup","Radio","value","BASE_URL","window","location","origin","CONST","API","test","getExam","submitExam","get","url","fetch","res","json","postJSON","data","method","headers","body","JSON","stringify","postString","text","actionGroup","marginBottom","submitButton","ExamView","questionResponses","setResponses","CONSTANT","then","exam","prevResponses","newResponses","Grid","Button","onClick","console","log","map","theme","createMuiTheme","typography","fontFamily","join","App","ThemeProvider","Exam","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07362808.chunk.js","sourcesContent":["import React, { ReactElement, useEffect } from \"react\";\nimport { IQuestion, IQuestionResponse } from \"models/ExamModels\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  FormControlLabel,\n  makeStyles,\n  Radio,\n  RadioGroup,\n} from \"@material-ui/core\";\nimport { lightBlue, green } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles({\n  root: {\n    margin: 10,\n  },\n  formControl: {\n    padding: 5,\n  },\n  questionLabel: {\n    fontWeight: \"bolder\",\n  },\n  question: {\n    backgroundColor: green[600],\n    color: lightBlue[50],\n    padding: 5,\n    paddingLeft: 10,\n    textAlign: \"left\",\n  },\n  option: {\n    minWidth: 200,\n  },\n});\n\ninterface Props extends IQuestion {\n  updateResponse: (response: IQuestionResponse) => void;\n}\n\nfunction Question(props: Props): ReactElement {\n  const classes = useStyles();\n  const initValueSelected = {\n    isCheckedOp1: false,\n    isCheckedOp2: false,\n    isCheckedOp3: false,\n    isCheckedOp4: false,\n  };\n  const [selectedSingleValue, setSelectedSingleValue] = React.useState(\n    initValueSelected\n  );\n  const [selectedMultipleValue, setSelectedMultipleValue] = React.useState(\n    initValueSelected\n  );\n  // Update response up to Exam\n  useEffect(() => {\n    onResponseChange();\n  }, [selectedSingleValue, selectedMultipleValue]);\n\n  const handleSingleChoice = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedSingleValue({\n      ...initValueSelected,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  const handleMultipleChoice = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedMultipleValue({\n      ...selectedMultipleValue,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  const onResponseChange = () => {\n    let response: IQuestionResponse;\n    // Assign Single value choice by Default\n    response = {\n      ...props,\n      ...selectedSingleValue,\n    };\n\n    // If this question is Multiple choice, update the response with Correct variable (contains multiple selection)\n    if (props.isMultiple) response = { ...response, ...selectedMultipleValue };\n    props.updateResponse(response);\n  };\n\n  const renderQuestion = (): JSX.Element => {\n    if (props.isMultiple)\n      // Multiple Choice Question\n      return (\n        <AccordionDetails>\n          <FormControl component=\"fieldset\" className={classes.formControl}>\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"isCheckedOp1\"\n                    color=\"primary\"\n                    checked={selectedMultipleValue.isCheckedOp1}\n                    onChange={handleMultipleChoice}\n                  />\n                }\n                label={props.op1}\n                className={classes.option}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"isCheckedOp2\"\n                    color=\"primary\"\n                    checked={selectedMultipleValue.isCheckedOp2}\n                    onChange={handleMultipleChoice}\n                  />\n                }\n                label={props.op2}\n                className={classes.option}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"isCheckedOp3\"\n                    color=\"primary\"\n                    checked={selectedMultipleValue.isCheckedOp3}\n                    onChange={handleMultipleChoice}\n                  />\n                }\n                label={props.op3}\n                className={classes.option}\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    name=\"isCheckedOp4\"\n                    color=\"primary\"\n                    checked={selectedMultipleValue.isCheckedOp4}\n                    onChange={handleMultipleChoice}\n                  />\n                }\n                label={props.op4}\n                className={classes.option}\n              />\n            </FormGroup>\n          </FormControl>\n        </AccordionDetails>\n      );\n\n    // Single Choice Question\n    return (\n      <AccordionDetails>\n        <FormControl component=\"fieldset\" className={classes.formControl}>\n          <RadioGroup>\n            <FormControlLabel\n              control={\n                <Radio\n                  name=\"isCheckedOp1\"\n                  color=\"primary\"\n                  value=\"1\"\n                  checked={selectedSingleValue.isCheckedOp1}\n                  onChange={handleSingleChoice}\n                />\n              }\n              label={props.op1}\n              className={classes.option}\n            />\n            <FormControlLabel\n              control={\n                <Radio\n                  name=\"isCheckedOp2\"\n                  color=\"primary\"\n                  value=\"2\"\n                  checked={selectedSingleValue.isCheckedOp2}\n                  onChange={handleSingleChoice}\n                />\n              }\n              label={props.op2}\n              className={classes.option}\n            />\n            <FormControlLabel\n              control={\n                <Radio\n                  name=\"isCheckedOp3\"\n                  color=\"primary\"\n                  value=\"3\"\n                  checked={selectedSingleValue.isCheckedOp3}\n                  onChange={handleSingleChoice}\n                />\n              }\n              label={props.op3}\n              className={classes.option}\n            />\n            <FormControlLabel\n              control={\n                <Radio\n                  name=\"isCheckedOp4\"\n                  color=\"primary\"\n                  value=\"4\"\n                  checked={selectedSingleValue.isCheckedOp4}\n                  onChange={handleSingleChoice}\n                />\n              }\n              label={props.op4}\n              className={classes.option}\n            />\n          </RadioGroup>\n        </FormControl>\n      </AccordionDetails>\n    );\n  };\n\n  // ==== Final return element ====\n  return (\n    <>\n      <Accordion className={classes.root}>\n        <AccordionSummary className={classes.question}>\n          <Typography variant=\"h5\" component=\"h2\">\n            <Typography> Question {props.id} :</Typography> {props.question}\n          </Typography>\n        </AccordionSummary>\n        {renderQuestion()}\n      </Accordion>\n      <br />\n    </>\n  );\n}\n\nexport default Question;\n","var BASE_URL = window.location.origin;\nconst CONST = {\n  API: {\n    test: `${BASE_URL}/api/students/test`,\n    getExam: `${BASE_URL}/api/students/getExam`,\n    submitExam: `${BASE_URL}/api/students/submitExam`,\n  },\n};\n\nexport default CONST;\n","interface TypeAPI {\n  get: <T>(url: string) => Promise<T>;\n  postJSON: <dataType, ObjectType>(\n    url: string,\n    data: dataType\n  ) => Promise<ObjectType>;\n  postString: <dataType>(url: string, data: dataType) => Promise<string>;\n}\n\nconst API: TypeAPI = {\n  async get<T>(url: string): Promise<T> {\n    const res = await fetch(url);\n    return await res.json();\n  },\n  async postJSON<T, K>(url: string, data: T): Promise<K> {\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return await res.json();\n  },\n  async postString<T>(url: string, data: T): Promise<string> {\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n    return await res.text();\n  },\n};\n\nexport default API;\n","import Question from \"components/QuestionCmp/Question\";\nimport React, { useEffect, useState } from \"react\";\nimport CONSTANT from \"CONST\";\nimport { IQuestionResponse } from \"models/ExamModels\";\nimport API from \"customModules/APIRequest\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  actionGroup: {\n    marginBottom: 20,\n  },\n  submitButton: {},\n});\n\nfunction ExamView() {\n  const classes = useStyles();\n  const [questionResponses, setResponses] = useState<IQuestionResponse[]>();\n  // Get questions of Exam\n  useEffect(() => {\n    API.get<IQuestionResponse[]>(CONSTANT.API.getExam).then(\n      (exam: IQuestionResponse[]): void => {\n        setResponses(exam);\n      }\n    );\n  }, []);\n\n  // Handle change from question response, reload questions\n  const updateResponse = (response: IQuestionResponse): void => {\n    setResponses((prevResponses) => {\n      if (!prevResponses) return;\n\n      let newResponses: IQuestionResponse[];\n      newResponses = prevResponses;\n      newResponses[response.id - 1] = response;\n      return newResponses;\n    });\n  };\n\n  // Handle Submit exam\n  const handleSubmit = () => {\n    console.log(\"Exam submit: \", questionResponses);\n    API.postJSON<IQuestionResponse[], any>(\n      CONSTANT.API.submitExam,\n      questionResponses!\n    ).then((res: any) => {\n      console.log(res);\n    });\n  };\n\n  return questionResponses ? (\n    <>\n      <Grid className={classes.actionGroup}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.submitButton}\n          onClick={handleSubmit}\n        >\n          Submit Exam\n        </Button>\n      </Grid>\n      {questionResponses.map((question) => (\n        <Question {...question} updateResponse={updateResponse}></Question>\n      ))}\n    </>\n  ) : (\n    <>This Exam has no question</>\n  );\n}\n\nexport default ExamView;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport ExamView from \"components/ExamCmp/Exam\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      \"system-ui\",\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <ExamView></ExamView>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}